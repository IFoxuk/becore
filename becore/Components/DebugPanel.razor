@page "/debug-panel"
@using becore.Services
@using becore.Models
@using Blazorise
@using System.Text.Json
@inject AuthService AuthService
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<DebugPanel> Logger
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

<PageTitle>Debug Panel - becore</PageTitle>

<Container>
    <Row>
        <Column>
            <Card>
                <CardHeader>
                    <CardTitle Size="4">
                        <Icon Name="IconName.Settings" />
                        API Debug Panel
                    </CardTitle>
                </CardHeader>
                <CardBody>
                    <Field>
                        <FieldLabel>API Endpoint</FieldLabel>
                        <Select TValue="string" @bind-SelectedValue="selectedEndpoint">
                            <SelectItem TValue="string" Value="@("api/auth/debug-auth")">Debug Auth</SelectItem>
                            <SelectItem TValue="string" Value="@("api/auth/me")">Current User</SelectItem>
                            <SelectItem TValue="string" Value="@("api/content/pages")">List Pages</SelectItem>
                        </Select>
                    </Field>
                    
                    <Field>
                        <FieldLabel>HTTP Method</FieldLabel>
                        <Select TValue="string" @bind-SelectedValue="httpMethod">
                            <SelectItem TValue="string" Value="@("GET")">GET</SelectItem>
                            <SelectItem TValue="string" Value="@("POST")">POST</SelectItem>
                            <SelectItem TValue="string" Value="@("PUT")">PUT</SelectItem>
                            <SelectItem TValue="string" Value="@("DELETE")">DELETE</SelectItem>
                        </Select>
                    </Field>
                    
                    <Field>
                        <FieldLabel>Request Body (JSON)</FieldLabel>
                        <MemoEdit @bind-Text="requestBody" Rows="4" Placeholder="Enter JSON body for POST/PUT requests" />
                    </Field>
                    
                    <Button Color="Color.Primary" Clicked="CallApi" Loading="isLoading">
                        <Icon Name="IconName.Play" />
                        Call API
                    </Button>
                    
                    <Button Color="Color.Secondary" Clicked="TestAuthentication" Loading="isLoading" Class="ms-2">
                        <Icon Name="IconName.User" />
                        Test Auth
                    </Button>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <Row>
        <Column>
            <Card>
                <CardHeader>
                    <CardTitle Size="4">Add New Page</CardTitle>
                </CardHeader>
                <CardBody>
                    <Field>
                        <FieldLabel>Page Name</FieldLabel>
                        <TextEdit @bind-Text="newPageName" Placeholder="Enter page name" />
                    </Field>
                    
                    <Field>
                        <FieldLabel>Page Description</FieldLabel>
                        <MemoEdit @bind-Text="newPageContent" Rows="4" Placeholder="Enter page description (optional)" />
                    </Field>
                    
                    <Field>
                        <FieldLabel>Tags (comma separated)</FieldLabel>
                        <TextEdit @bind-Text="newPageTags" Placeholder="tag1, tag2, tag3" />
                    </Field>
                    
                    <Button Color="Color.Success" Clicked="AddPage" Loading="isLoading">
                        <Icon Name="IconName.Add" />
                        Add New Page
                    </Button>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <Row>
        <Column>
            <Card>
                <CardHeader>
                    <CardTitle Size="5">
                        <Icon Name="IconName.Desktop" />
                        Results
                    </CardTitle>
                    @if (!string.IsNullOrEmpty(result))
                    {
                        <Button Color="Color.Light" Size="Size.Small" Clicked="ClearResults" Class="float-end">
                            <Icon Name="IconName.Times" />
                            Clear
                        </Button>
                    }
                </CardHeader>
                <CardBody>
                    @if (isLoading)
                    {
                        <Div Class="text-center">
                            <Icon Name="IconName.Circle" Animation="Animation.Spin" />
                            <Span>Processing request...</Span>
                        </Div>
                    }
                    else if (!string.IsNullOrEmpty(result))
                    {
                        <pre style="background: #f8f9fa; padding: 1rem; border-radius: 0.375rem; overflow-x: auto; white-space: pre-wrap; max-height: 400px;">@result</pre>
                    }
                    else
                    {
                        <Paragraph TextColor="TextColor.Muted">No results yet. Execute an API call to see results here.</Paragraph>
                    }
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <Alert Color="Color.Danger" Class="mt-3">
                            <Icon Name="IconName.ExclamationTriangle" />
                            @errorMessage
                        </Alert>
                    }
                </CardBody>
            </Card>
        </Column>
    </Row>
</Container>

@code {
    private string selectedEndpoint = "api/auth/debug-auth";
    private string httpMethod = "GET";
    private string requestBody = "";
    private string newPageName = string.Empty;
    private string newPageContent = string.Empty;
    private string newPageTags = string.Empty;
    private string result = string.Empty;
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task CallApi()
    {
        isLoading = true;
        errorMessage = string.Empty;
        result = string.Empty;
        StateHasChanged();

        try
        {
            await AuthService.WaitForInitializationAsync();
            var token = await AuthService.GetTokenAsync();
            
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            HttpResponseMessage response;
            
            switch (httpMethod.ToUpper())
            {
                case "GET":
                    response = await httpClient.GetAsync(selectedEndpoint);
                    break;
                case "POST":
                    var postContent = new StringContent(requestBody ?? "{}", System.Text.Encoding.UTF8, "application/json");
                    response = await httpClient.PostAsync(selectedEndpoint, postContent);
                    break;
                case "PUT":
                    var putContent = new StringContent(requestBody ?? "{}", System.Text.Encoding.UTF8, "application/json");
                    response = await httpClient.PutAsync(selectedEndpoint, putContent);
                    break;
                case "DELETE":
                    response = await httpClient.DeleteAsync(selectedEndpoint);
                    break;
                default:
                    throw new ArgumentException($"Unsupported HTTP method: {httpMethod}");
            }

            var responseContent = await response.Content.ReadAsStringAsync();
            
            result = $"Status: {response.StatusCode} ({(int)response.StatusCode})\n";
            result += $"Headers:\n";
            foreach (var header in response.Headers)
            {
                result += $"  {header.Key}: {string.Join(", ", header.Value)}\n";
            }
            result += $"\nBody:\n";
            
            try
            {
                var jsonDoc = JsonDocument.Parse(responseContent);
                result += JsonSerializer.Serialize(jsonDoc, new JsonSerializerOptions { WriteIndented = true });
            }
            catch
            {
                result += responseContent;
            }
            
            Logger.LogInformation("API call to {Endpoint} completed with status {StatusCode}", selectedEndpoint, response.StatusCode);
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
            Logger.LogError(ex, "Error calling API {Endpoint}", selectedEndpoint);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AddPage()
    {
        if (string.IsNullOrWhiteSpace(newPageName))
        {
            errorMessage = "Page name is required";
            return;
        }
        
        isLoading = true;
        errorMessage = string.Empty;
        result = string.Empty;
        StateHasChanged();

        try
        {
            await AuthService.WaitForInitializationAsync();
            var token = await AuthService.GetTokenAsync();
            
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            
            if (!string.IsNullOrEmpty(token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var pageData = new
            {
                Name = newPageName.Trim(),
                Description = newPageContent?.Trim(),
                QuadIcon = (string?)null,
                WideIcon = (string?)null,
                Tags = newPageTags?.Split(',', StringSplitOptions.RemoveEmptyEntries)
                    .Select(t => t.Trim())
                    .Where(t => !string.IsNullOrEmpty(t))
                    .ToList()
            };

            var response = await httpClient.PostAsJsonAsync("api/content/pages", pageData);
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                result = $"✅ Page '{newPageName}' created successfully!\n\nResponse: {responseContent}";
                newPageName = string.Empty;
                newPageContent = string.Empty;
                newPageTags = string.Empty;
            }
            else
            {
                errorMessage = $"Failed to create page. Status: {response.StatusCode}";
                result = responseContent;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
            Logger.LogError(ex, "Error adding page {PageName}", newPageName);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task TestAuthentication()
    {
        isLoading = true;
        errorMessage = string.Empty;
        result = string.Empty;
        StateHasChanged();

        try
        {
            result = await AuthService.DebugAuthAsync();
            result += $"\n\n🔐 IsAuthenticated: {AuthService.IsAuthenticated}";
            
            if (AuthService.CurrentUser != null)
            {
                result += $"\n👤 Current User: {AuthService.CurrentUser.Username}";
            }
            else
            {
                result += "\n👤 Current User: null";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
            Logger.LogError(ex, "Error testing authentication");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ClearResults()
    {
        result = string.Empty;
        errorMessage = string.Empty;
        StateHasChanged();
    }
}
