@page "/test-auth"
@using becore.Services
@using becore.Models
@using Blazorise
@inject AuthService AuthService
@inject ILogger<TestAuth> Logger
@inject IHttpClientFactory HttpClientFactory

<PageTitle>–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AuthService</PageTitle>

<Container>
    <Row>
        <Column>
            <Card>
                <CardHeader>
                    <CardTitle>–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AuthService —Å API</CardTitle>
                </CardHeader>
                <CardBody>
                    <Div Class="mb-3">
                        <Button Color="Color.Primary" Clicked="TestConnection">
                            –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API
                        </Button>
                        <Button Color="Color.Secondary" Clicked="TestDebugAuth" Class="ms-2">
                            –¢–µ—Å—Ç Debug Auth
                        </Button>
                        <Button Color="Color.Info" Clicked="TestCurrentUser" Class="ms-2">
                            –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        </Button>
                        <Button Color="Color.Warning" Clicked="ClearResults" Class="ms-2">
                            –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        </Button>
                    </Div>

                    <Div Class="mb-3">
                        <strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ AuthService:</strong>
                        <br />
                        <Badge Color="@(AuthService.IsAuthenticated ? Color.Success : Color.Danger)">
                            @(AuthService.IsAuthenticated ? "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" : "–ù–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                        </Badge>
                        @if (AuthService.CurrentUser != null)
                        {
                            <Badge Color="Color.Info" Class="ms-2">
                                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @AuthService.CurrentUser.Username
                            </Badge>
                        }
                    </Div>

                    @if (isLoading)
                    {
                        <Alert Color="Color.Info">
                            <Icon Name="IconName.Circle" Animation="Animation.Spin" />
                            –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞...
                        </Alert>
                    }

                    @if (!string.IsNullOrEmpty(results))
                    {
                        <Alert Color="Color.Light">
                            <h5>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:</h5>
                            <pre style="background: #f8f9fa; padding: 1rem; border-radius: 0.375rem; overflow-x: auto; white-space: pre-wrap;">@results</pre>
                        </Alert>
                    }

                    @if (!string.IsNullOrEmpty(error))
                    {
                        <Alert Color="Color.Danger">
                            <h5>–û—à–∏–±–∫–∏:</h5>
                            <pre style="background: #f8d7da; padding: 1rem; border-radius: 0.375rem; overflow-x: auto; white-space: pre-wrap;">@error</pre>
                        </Alert>
                    }
                </CardBody>
            </Card>
        </Column>
    </Row>
</Container>

@code {
    private bool isLoading = false;
    private string results = "";
    private string error = "";

    private async Task TestConnection()
    {
        isLoading = true;
        error = "";
        results = "";
        StateHasChanged();

        try
        {
            results += "=== –¢–ï–°–¢ –°–û–ï–î–ò–ù–ï–ù–ò–Ø –° API ===\n";
            results += $"–í—Ä–µ–º—è: {DateTime.Now:HH:mm:ss}\n";
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º HttpClient
            if (HttpClientFactory == null)
            {
                results += "‚ùå HttpClientFactory –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
                return;
            }
            results += "‚úÖ HttpClientFactory –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n";

            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            results += $"‚úÖ HttpClient —Å–æ–∑–¥–∞–Ω —Å BaseAddress: {httpClient.BaseAddress}\n";
            results += $"‚úÖ Timeout: {httpClient.Timeout}\n";

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            try
            {
                var response = await httpClient.GetAsync("api/auth/debug-auth");
                results += $"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: {response.StatusCode}\n";
                
                var content = await response.Content.ReadAsStringAsync();
                results += $"üìÑ –û—Ç–≤–µ—Ç API:\n{content}\n";
            }
            catch (Exception ex)
            {
                results += $"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {ex.Message}\n";
                error += $"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {ex}\n";
            }

            results += "\n=== –ö–û–ù–ï–¶ –¢–ï–°–¢–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø ===\n\n";
        }
        catch (Exception ex)
        {
            error += $"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex}\n";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task TestDebugAuth()
    {
        isLoading = true;
        error = "";
        StateHasChanged();

        try
        {
            results += "=== –¢–ï–°–¢ DEBUG AUTH ===\n";
            results += $"–í—Ä–µ–º—è: {DateTime.Now:HH:mm:ss}\n";

            var debugResult = await AuthService.DebugAuthAsync();
            results += $"üìÑ Debug Auth —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{debugResult}\n";
            
            results += "\n=== –ö–û–ù–ï–¶ –¢–ï–°–¢–ê DEBUG AUTH ===\n\n";
        }
        catch (Exception ex)
        {
            error += $"–û—à–∏–±–∫–∞ Debug Auth: {ex}\n";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task TestCurrentUser()
    {
        isLoading = true;
        error = "";
        StateHasChanged();

        try
        {
            results += "=== –¢–ï–°–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===\n";
            results += $"–í—Ä–µ–º—è: {DateTime.Now:HH:mm:ss}\n";

            await AuthService.WaitForInitializationAsync();
            results += "‚úÖ AuthService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n";

            results += $"üîê IsAuthenticated: {AuthService.IsAuthenticated}\n";
            results += $"üë§ CurrentUser –≤ –∫–µ—à–µ: {(AuthService.CurrentUser != null ? AuthService.CurrentUser.Username : "null")}\n";

            var user = await AuthService.GetCurrentUserAsync();
            if (user != null)
            {
                results += "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ:\n";
                results += $"   ID: {user.Id}\n";
                results += $"   Username: {user.Username}\n";
                results += $"   Email: {user.Email}\n";
                results += $"   CreatedAt: {user.CreatedAt}\n";
                results += $"   LastLoginAt: {user.LastLoginAt}\n";
                results += $"   IsActive: {user.IsActive}\n";
            }
            else
            {
                results += "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–µ–Ω (null)\n";
            }
            
            results += "\n=== –ö–û–ù–ï–¶ –¢–ï–°–¢–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===\n\n";
        }
        catch (Exception ex)
        {
            error += $"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ex}\n";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ClearResults()
    {
        results = "";
        error = "";
        StateHasChanged();
    }
}
