@using Blazorise
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using becore.Components.Aothorization

@page "/Registration"
<Container Fluid>
    <Row>
        <Column>
            <Card>
                <EditForm Model="@registratonModel" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSuccess></ValidationSuccess>

                    <Div Flex="Flex.JustifyContent.Center">
                        <CardTitle>Регистрация</CardTitle>
                    </Div>
                    <CardBody Flex="Flex.JustifyContent.Center.Column">
                        <Field Horizontal>
                            <FieldLabel>Логин</FieldLabel>
                            <FieldBody>
                                <Validation Validator="@ValidateUsername">
                                    <TextEdit @bind-Text="registratonModel.Username" Placeholder="Логин" />
                                </Validation>
                            </FieldBody>
                        </Field>
                        <Field Horizontal>
                            <FieldLabel>
                                Пароль
                            </FieldLabel>
                            <Validation Validator="@ValidatePassword">
                                <FieldBody>
                                    <TextEdit @bind-Text="registratonModel.Password" Placeholder="Введите ваш пароль" />
                                </FieldBody>
                            </Validation>
                        </Field>
                        <FieldHelp>
                            <ValidationMessage For="@(() => registratonModel.Username)" />
                        </FieldHelp>
                        <FieldHelp>
                            <ValidationMessage For="@(() => registratonModel.Password)" />
                        </FieldHelp>
                    </CardBody>
                    <CardFooter Flex="Flex.JustifyContent.Center">
                        <Div>
                            <Button Color="Color.Primary" Margin="Margin.Is3" Type="ButtonType.Submit">
                                Применить <Icon Name="IconName.ArrowRight" />
                            </Button>
                        </Div>
                    </CardFooter>

                </EditForm>
            </Card>
        </Column>
    </Row>
</Container>
@code {
    private RegistrationModel registratonModel = new RegistrationModel();
    private EditContext? editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(registratonModel);
    }

    private void HandleValidSubmit()
    {
        // TODO: add registration algorithm.
        Console.WriteLine(registratonModel.Username + " " + registratonModel.Password);
    }

    void ValidateUsername(ValidatorEventArgs e)
    {
        var username = e.Value?.ToString() ?? "";

        if (string.IsNullOrWhiteSpace(username))
            e.Status = ValidationStatus.Error;
        else if (username.Length < 3 || username.Length > 32)
            e.Status = ValidationStatus.Error;
        else if (!Regex.IsMatch(username, @"^[a-zA-Z0-9_\.]+$"))
            e.Status = ValidationStatus.Error;
        else
            e.Status = ValidationStatus.Success;
    }

    void ValidatePassword(ValidatorEventArgs e)
    {
        var password = e.Value?.ToString() ?? "";

        if (string.IsNullOrWhiteSpace(password))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Введите пароль";
        }
        else if (password.Length < 6 || password.Length > 32)
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Пароль должен содержать от 6 до 32 символов";
        }
        else if (!Regex.IsMatch(password, @"^(?=.*[A-Za-z])(?=.*\d)(?=.*[\W_]).+$"))
        {
            e.Status = ValidationStatus.Error;
            e.ErrorText = "Пароль должен содержать букву, цифру и специальный символ";
        }
        else
        {
            e.Status = ValidationStatus.Success;
        }
    }
}
